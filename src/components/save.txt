BoardContext.js -->>

import { createContext } from "react";

export const BoardContext = createContext({
  boards: {},
  currentBoard: "",
  setBoards: () => {},
  setCurrentBoard: () => {},
});


KanbanBoard.jsx --->>>

import React, { useContext } from "react";
import { BoardContext } from "../context/BoardContext";

const KanbanBoard = () => {
  const { boards, currentBoard, setBoards } = useContext(BoardContext);
  const board = boards[currentBoard];

  const handleAddTask = (colId) => {
    const taskText = prompt("Enter task title:");
    if (!taskText) return;

    const newTask = { id: Date.now(), title: taskText };

    const updatedBoard = {
      ...board,
      [colId]: {
        ...board[colId],
        items: [...board[colId].items, newTask],
      },
    };

    setBoards(prev => ({ ...prev, [currentBoard]: updatedBoard }));
  };

  return (
    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
      {Object.entries(board).map(([colId, col]) => (
        <div key={colId} className="bg-slate-700 rounded-lg p-4 shadow-md">
          <h2 className="text-xl font-semibold mb-3">{col.name}</h2>
          <ul className="space-y-2">
            {col.items.map(item => (
              <li
                key={item.id}
                className="bg-slate-600 p-2 rounded text-white"
              >
                {item.title}
              </li>
            ))}
          </ul>
          <button
            onClick={() => handleAddTask(colId)}
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded"
          >
            + Add Task
          </button>
        </div>
      ))}
    </div>
  );
};

export default KanbanBoard;


Header.jsx -->>

import React, { useContext, useState } from "react";
import { BoardContext } from "../context/BoardContext";

const Header = () => {
  const { boards, currentBoard, setCurrentBoard, setBoards } = useContext(BoardContext);
  const [newBoardName, setNewBoardName] = useState("");

  const addBoard = () => {
    if (!newBoardName.trim()) return;

    setBoards(prev => ({
      ...prev,
      [newBoardName]: {
        "todo": { name: "To Do", items: [] },
        "inprogress": { name: "In Progress", items: [] },
        "done": { name: "Done", items: [] },
      }
    }));

    setCurrentBoard(newBoardName);
    setNewBoardName("");
  };

  return (
    <div className="flex items-center justify-between mb-6">
      <div>
        <select
          value={currentBoard}
          onChange={e => setCurrentBoard(e.target.value)}
          className="p-2 rounded-md bg-slate-700 text-white"
        >
          {Object.keys(boards).map(name => (
            <option key={name} value={name}>
              {name}
            </option>
          ))}
        </select>
      </div>

      <div className="flex gap-2">
        <input
          type="text"
          placeholder="New Board Name"
          value={newBoardName}
          onChange={e => setNewBoardName(e.target.value)}
          className="px-3 py-1 rounded bg-slate-700 text-white outline-none"
        />
        <button
          onClick={addBoard}
          className="bg-blue-600 hover:bg-blue-700 px-4 py-1 rounded text-white"
        >
          + Add Board
        </button>
      </div>
    </div>
  );
};

export default Header;


App.jsx  ---->>>

import React, { useEffect, useState } from "react";
import { BoardContext } from "./context/BoardContext";
import KanbanBoard from "./components/KanbanBoard";
import Header from "./components/Header";

const getInitialData = () => {
  const storedBoards = JSON.parse(localStorage.getItem("kanban-boards")) || {};
  const storedCurrent = localStorage.getItem("kanban-current-board") || "My Board";

  if (!storedBoards[storedCurrent]) {
    storedBoards[storedCurrent] = {
      "todo": { name: "To Do", items: [] },
      "inprogress": { name: "In Progress", items: [] },
      "done": { name: "Done", items: [] },
    };
  }

  return { storedBoards, storedCurrent };
};

const App = () => {
  const { storedBoards, storedCurrent } = getInitialData();

  const [boards, setBoards] = useState(storedBoards);
  const [currentBoard, setCurrentBoard] = useState(storedCurrent);

  useEffect(() => {
    localStorage.setItem("kanban-boards", JSON.stringify(boards));
  }, [boards]);

  useEffect(() => {
    localStorage.setItem("kanban-current-board", currentBoard);
  }, [currentBoard]);

  return (
    <BoardContext.Provider value={{ boards, setBoards, currentBoard, setCurrentBoard }}>
      <div className="min-h-screen text-white bg-gradient-to-r from-slate-800 to-slate-950 p-4">
        <Header />
        <KanbanBoard />
      </div>
    </BoardContext.Provider>
  );
};

export default App;

